void MapView::draw(const Rect& rect)
{
    // update visible tiles cache when needed
    if(m_mustUpdateVisibleTilesCache || m_updateTilesPos > 0)
        updateVisibleTilesCache(m_mustUpdateVisibleTilesCache ? 0 : m_updateTilesPos);

    float scaleFactor = m_tileSize/(float)Otc::TILE_PIXELS;
    Position cameraPosition = getCameraPosition();

    int drawFlags = 0;
    int drawFlags2 = 0;
    // First branch:
    // This is unlikely to be false because a lot of us
    // don't wanna hear their GPU fan while playing a
    // 2D game.
    //
    // Second & Third branch:
    // This is likely to be true since not many people have
    // low-end graphics cards.
    if (unlikely(g_map.isForcingAnimations()) || (likely(g_map.isShowingAnimations()) && m_viewMode == NEAR_VIEW)) {
        drawFlags = Otc::DrawAnimations;
        drawFlags2 = Otc::DrawAnimations;
    }

    if (m_viewMode == NEAR_VIEW) {
        drawFlags |= Otc::DrawGround | Otc::DrawGroundBorders;
        drawFlags2 |= Otc::DrawWalls | Otc::DrawItems | Otc::DrawCreatures | Otc::DrawEffects | Otc::DrawMissiles;
    }
    else {
        drawFlags |= Otc::DrawGround | Otc::DrawGroundBorders;
        drawFlags2 |= Otc::DrawWalls | Otc::DrawItems | Otc::DrawMissiles;
    }

    if(m_mustDrawVisibleTilesCache || (drawFlags & Otc::DrawAnimations || drawFlags2 & Otc::DrawAnimations)) {
        m_framebuffer->bind();

        if(m_mustCleanFramebuffer) {
            Rect clearRect = Rect(0, 0, m_drawDimension * m_tileSize);
            g_painter->setColor(Color::black);
            g_painter->drawFilledRect(clearRect);

            if(m_drawLights) {
                m_lightView->reset();
                m_lightView->resize(m_framebuffer->getSize());

                Light ambientLight;
                if(cameraPosition.z <= Otc::SEA_FLOOR) {
                    ambientLight = g_map.getLight();
                } else {
                    ambientLight.color = 215;
                    ambientLight.intensity = 0;
                }
                ambientLight.intensity = std::max<int>(m_minimumAmbientLight*255, ambientLight.intensity);
                m_lightView->setGlobalLight(ambientLight);
            }
        }
        g_painter->setColor(Color::white);

        auto it = m_cachedVisibleTiles.begin(), end = m_cachedVisibleTiles.end();
        auto it2 = m_cachedVisibleTiles.begin();
        for(int z=m_cachedLastVisibleFloor;z>=m_cachedFirstVisibleFloor;--z) {

            while(it != end) {
                const TilePtr& tile = *it;
                Position tilePos = tile->getPosition();
                if(tilePos.z != z)
                    break;
                else
                    ++it;

                if (g_map.isCovered(tilePos, m_cachedFirstVisibleFloor)) {
                    tile->draw(transformPositionTo2D(tilePos, cameraPosition), scaleFactor, drawFlags);
                }
                else {
                    tile->draw(transformPositionTo2D(tilePos, cameraPosition), scaleFactor, drawFlags, m_lightView.get());
                }
            }

            while (it2 != end) {
                const TilePtr& tile = *it2;
                Position tilePos = tile->getPosition();
                if (tilePos.z != z)
                    break;
                else
                    ++it2;

                if (g_map.isCovered(tilePos, m_cachedFirstVisibleFloor)) {
                    tile->draw(transformPositionTo2D(tilePos, cameraPosition), scaleFactor, drawFlags2);
                }
                else {
                    tile->draw(transformPositionTo2D(tilePos, cameraPosition), scaleFactor, drawFlags2, m_lightView.get());
                }
            }

            if(drawFlags2 & Otc::DrawMissiles) {
                for(const MissilePtr& missile : g_map.getFloorMissiles(z)) {
                    missile->draw(transformPositionTo2D(missile->getPosition(), cameraPosition), scaleFactor, drawFlags2 & Otc::DrawAnimations, m_lightView.get());
                }
            }
        }

        m_framebuffer->release();

        // generating mipmaps each frame can be slow in older cards
        //m_framebuffer->getTexture()->buildHardwareMipmaps();

        m_mustDrawVisibleTilesCache = false;
    }
